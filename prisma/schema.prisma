// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  SHOPPER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ProductSize {
  XXXS
  XXS
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  // Numeric sizes
  SIZE_36
  SIZE_37
  SIZE_38
  SIZE_39
  SIZE_40
  SIZE_41
  SIZE_42
  SIZE_43
  SIZE_44
  SIZE_45
  // One size
  ONE_SIZE
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String
  role     Role   @default(SHOPPER)

  // Profile Information
  phoneNumber       String?
  address           String?
  city              String?
  country           String?
  postalCode        String?
  avatar            String? // URL to profile image
  dateOfBirth       DateTime?
  gender            Gender?
  bio               String? // Short description
  preferredLanguage String?   @default("en")

  // Account Status
  isEmailVerified   Boolean   @default(false)
  verificationToken String?
  refreshToken      String?
  resetToken        String?
  lastLogin         DateTime?
  isActive          Boolean   @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stores  Store[]
  orders  Order[]
  reviews Review[]
  carts   Cart[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model Store {
  id          String    @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  products    Product[] // Add this line to complete the relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ownerId])
  @@index([name])
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String?
  price         Decimal
  discount      Decimal?
  thumbnail     String? // Main product image
  images        String[] // Additional product images
  averageRating Decimal? @default(0)
  isFeatured    Boolean  @default(false)

  // Sizes relation
  variants ProductVariant[]

  quantity Int    @default(0)
  storeId  String
  store    Store  @relation(fields: [storeId], references: [id])

  // Relations
  categories Category[]
  cartItems  CartItem[]
  tags       Tag[]
  Review     Review[]
  OrderItem  OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([storeId])
  @@index([name])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  @@index([name])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String

  @@unique([userId, productId, orderId])
  @@index([userId])
  @@index([productId])
  @@index([orderId])
}

model Order {
  id               String         @id @default(uuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  status           OrderStatus    @default(PENDING)
  total            Decimal?       @db.Decimal(10, 2)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  paymentStatus    PaymentStatus?
  paymentReference String?
  paymentProvider  String?

  // Relations
  orderItems OrderItem[]
  reviews    Review[]
}

model Upload {
  id        String   @id @default(uuid()) // Generate UUID for database ID
  filename  String
  url       String
  mimetype  String
  size      Int
  publicId  String   @unique // Store Cloudinary's public_id separately
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model OrderItem {
  id              String  @id @default(uuid())
  order           Order   @relation(fields: [orderId], references: [id])
  orderId         String
  product         Product @relation(fields: [productId], references: [id])
  productId       String
  quantity        Int
  priceAtPurchase Decimal @db.Decimal(10, 2)
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]

  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
}

// Rename the model to ProductVariant
model ProductVariant {
  id        String      @id @default(uuid())
  size      ProductSize
  quantity  Int         @default(0)
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, size])
  @@index([productId])
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[] // Many-to-many relation with Product
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}
