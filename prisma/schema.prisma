// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  SHOPPER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String?
  role         Role     @default(SHOPPER)
  refreshToken String? // Add this field
  resetToken   String? // Add this field
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  stores  Store[]
  orders  Order[]
  reviews Review[]
  carts   Cart[]
}

model Store {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  // Relations
  products Product[]
}

model Product {
  id            String   @id @default(uuid())
  store         Store    @relation(fields: [storeId], references: [id])
  storeId       String
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String
  title         String
  description   String?
  price         Decimal  @db.Decimal(10, 2)
  discount      Int? // optional discount percentage
  stock         Int
  inStock       Boolean  @default(true)
  averageRating Decimal? @db.Decimal(2, 1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[] // Add this line for the opposite relation
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String

  @@unique([userId, productId, orderId])
  @@index([userId])
  @@index([productId])
  @@index([orderId])
}

model Order {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  status           OrderStatus    @default(PENDING)
  total            Decimal?       @db.Decimal(10, 2)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  paymentStatus    PaymentStatus?
  paymentReference String?
  paymentProvider  String?

  // Relations
  orderItems OrderItem[]
  reviews    Review[] // Add this line
}

model Upload {
  id        String   @id @default(uuid()) // Generate UUID for database ID
  filename  String
  url       String
  mimetype  String
  size      Int
  publicId  String   @unique // Store Cloudinary's public_id separately
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id              String  @id @default(uuid())
  order           Order   @relation(fields: [orderId], references: [id])
  orderId         String
  product         Product @relation(fields: [productId], references: [id])
  productId       String
  quantity        Int
  priceAtPurchase Decimal @db.Decimal(10, 2)
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]

  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
}
